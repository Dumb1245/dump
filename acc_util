import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class FileRenamerUtility {
    public static void main(String[] args) {
        try {
            // Null check for environment variable
            String inputDirectory = System.getenv("DM_IN_DIR");
            if (inputDirectory == null || inputDirectory.trim().isEmpty()) {
                DM11_BFA_Common.log.info("Error: DM_IN_DIR environment variable is not set");
                throw new IllegalStateException("DM_IN_DIR environment variable is not set");
            }

            // Read the business date from business_date.txt
            String businessDate = readBusinessDate(inputDirectory);
            
            // Log start of renaming process
            DM11_BFA_Common.log.info("Starting file renaming process. Business Date: " + businessDate + 
                                     ", Input Directory: " + inputDirectory);
            
            // Rename matching files
            renameMatchingFiles(inputDirectory, businessDate);
            
            // Log successful completion
            DM11_BFA_Common.log.info("File renaming completed successfully.");
        } catch (Exception e) {
            // Log error details with full stack trace
            DM11_BFA_Common.log.info("Error occurred during file renaming: " + e.getMessage());
            
            // Print full stack trace to help with debugging
            e.printStackTrace();
        }
    }
    
    /**
     * Reads the business date from business_date.txt in the input directory
     * @param inputDirectory Directory containing the business_date.txt
     * @return Business date as a string
     * @throws IOException If there's an error reading the file
     */
    private static String readBusinessDate(String inputDirectory) throws IOException {
        // Construct business date file path
        Path businessDateFile = Paths.get(inputDirectory, "business_date.txt");
        
        // Validate file exists
        if (!Files.exists(businessDateFile)) {
            DM11_BFA_Common.log.info("Error: Business date file not found at " + businessDateFile);
            throw new IOException("Business date file not found: " + businessDateFile);
        }
        
        DM11_BFA_Common.log.info("Reading business date from: " + businessDateFile);
        
        try (BufferedReader reader = new BufferedReader(new FileReader(businessDateFile.toFile()))) {
            // Read first line and trim
            String businessDate = reader.readLine();
            
            // Additional null and empty checks
            if (businessDate == null || businessDate.trim().isEmpty()) {
                DM11_BFA_Common.log.info("Error: Business date file is empty");
                throw new IllegalArgumentException("Business date file is empty");
            }
            
            businessDate = businessDate.trim();
            
            // Validate business date format (assuming YYYYMMDD)
            if (!businessDate.matches("\\d{8}")) {
                DM11_BFA_Common.log.info("Error: Invalid business date format: " + businessDate);
                throw new IllegalArgumentException("Invalid business date format: " + businessDate);
            }
            
            DM11_BFA_Common.log.info("Business date read: " + businessDate);
            return businessDate;
        }
    }
    
    /**
     * Renames files matching the specified patterns
     * @param directory Directory to search for files
     * @param businessDate Business date to insert in the filename
     * @throws IOException If there's an error renaming the file
     */
    private static void renameMatchingFiles(String directory, String businessDate) throws IOException {
        // Validate input parameters
        if (directory == null || directory.trim().isEmpty()) {
            DM11_BFA_Common.log.info("Error: Directory cannot be null or empty");
            throw new IllegalArgumentException("Directory cannot be null or empty");
        }
        
        if (businessDate == null || businessDate.trim().isEmpty()) {
            DM11_BFA_Common.log.info("Error: Business date cannot be null or empty");
            throw new IllegalArgumentException("Business date cannot be null or empty");
        }
        
        // Patterns to match
        final List<String> filePatterns = new ArrayList<>(Arrays.asList("ackyinfo", "cnsmr_accnt"));
        
        // Regular expression to match timestamp
        final Pattern timestampPattern = Pattern.compile("(\\d{14})\\.txt$");
        
        // Find and rename files
        File dir = new File(directory);
        
        // Additional directory existence check
        if (!dir.exists() || !dir.isDirectory()) {
            DM11_BFA_Common.log.info("Error: Invalid directory path: " + directory);
            throw new IOException("Invalid directory path: " + directory);
        }
        
        File[] files = dir.listFiles();
        
        if (files == null || files.length == 0) {
            DM11_BFA_Common.log.info("No files found in directory: " + directory);
            return;
        }
        
        int renamedFileCount = 0;
        
        for (final File file : files) {
            // Skip if file is null or not a file
            if (file == null || !file.isFile()) {
                continue;
            }
            
            String filename = file.getName();
            
            // Null and empty check for filename
            if (filename == null || filename.trim().isEmpty()) {
                DM11_BFA_Common.log.info("Skipping file with invalid name");
                continue;
            }
            
            // Check if file matches any of the patterns
            boolean matchesPattern = false;
            for (String pattern : filePatterns) {
                if (filename.startsWith(pattern) && 
                    (filename.contains("_monthly_") || !filename.contains("_")) && 
                    filename.endsWith(".txt")) {
                    matchesPattern = true;
                    break;
                }
            }
            
            if (matchesPattern) {
                // Extract timestamp
                Matcher matcher = timestampPattern.matcher(filename);
                if (matcher.find()) {
                    String timestamp = matcher.group(1);
                    
                    // Construct new filename
                    String newFilename;
                    if (filename.contains("_monthly_")) {
                        newFilename = filename.replace("_" + timestamp, "_" + businessDate + "_" + timestamp);
                    } else {
                        newFilename = filename.replace(timestamp, businessDate + "_" + timestamp);
                    }
                    
                    // Rename file
                    Path newPath = Paths.get(directory, newFilename);
                    
                    try {
                        Files.move(file.toPath(), newPath, StandardCopyOption.REPLACE_EXISTING);
                        
                        // Log each file rename
                        DM11_BFA_Common.log.info("Renamed: " + filename + " -> " + newFilename);
                        renamedFileCount++;
                    } catch (IOException e) {
                        // Log specific rename failures
                        DM11_BFA_Common.log.info("Failed to rename file " + filename + ": " + e.getMessage());
                    }
                }
            }
        }
        
        // Log total number of renamed files
        DM11_BFA_Common.log.info("Total files renamed: " + renamedFileCount);
    }
}
